From 520f931cce3e47d54b9c46588ded1915487653dc Mon Sep 17 00:00:00 2001
From: "ilan.ganor" <ilan@kamacode.com>
Date: Thu, 16 Nov 2023 15:23:09 +0200
Subject: [PATCH] added patch for power managment and initial GPIO settings

---
 arch/arm/boot/dts/qcom/mdm9607.dtsi |  12 +++
 arch/arm/configs/mdm9607_defconfig  |   1 +
 drivers/misc/Kconfig                |   5 ++
 drivers/misc/Makefile               |   1 +
 drivers/misc/personal_pm.c          | 131 ++++++++++++++++++++++++++++
 include/dt-bindings/gpio/gpio.h     |   4 +-
 6 files changed, 153 insertions(+), 1 deletion(-)
 create mode 100644 drivers/misc/personal_pm.c

diff --git a/arch/arm/boot/dts/qcom/mdm9607.dtsi b/arch/arm/boot/dts/qcom/mdm9607.dtsi
index 8dda1c21db3d..57d7584b9d86 100644
--- a/arch/arm/boot/dts/qcom/mdm9607.dtsi
+++ b/arch/arm/boot/dts/qcom/mdm9607.dtsi
@@ -101,12 +101,24 @@
 #include "mdm9607-bus.dtsi"
 #include "mdm9607-coresight.dtsi"
 #include "mdm9607-pm.dtsi"
+#include <dt-bindings/gpio/gpio.h>
 
 &soc {
 	#address-cells = <1>;
 	#size-cells = <1>;
 	ranges;
 
+        personal_station-pm {
+                compatible = "personal,personal_station-pm";
+                platform-unique;
+                status = "okay";
+		pin_numbers = <7 8 13 35 32 33>;
+		pin_names = 	"SYS_PWR_OFF", "ROUTER_RESET", "JETSON_RESET", "TP1", "TP2", "12V_TZ";
+		//GPIOF_OUT_INIT_LOW  GPIOF_OUT_INIT_HIGH GPIOF_IN
+		pin_states = <GPIOF_OUT_INIT_LOW GPIOF_OUT_INIT_LOW GPIOF_OUT_INIT_LOW GPIOF_IN GPIOF_IN GPIOF_IN>;
+		pin_init_val = <0 0 0 0 0 0>;
+        };
+
 	intc: interrupt-controller@b000000 {
 		compatible = "qcom,msm-qgic2";
 		interrupt-controller;
diff --git a/arch/arm/configs/mdm9607_defconfig b/arch/arm/configs/mdm9607_defconfig
index bae8ba852181..0c6c191b44c6 100644
--- a/arch/arm/configs/mdm9607_defconfig
+++ b/arch/arm/configs/mdm9607_defconfig
@@ -642,3 +642,4 @@ CONFIG_EVM_EXTRA_SMACK_XATTRS=y
 # set it to 'y'.
 CONFIG_IMA_FORCE_MEASUREMENT=y
 # SWISTOP
+CONFIG_PERSONAL_PM=y
diff --git a/drivers/misc/Kconfig b/drivers/misc/Kconfig
index b687acbc738b..08b66bdf44b4 100755
--- a/drivers/misc/Kconfig
+++ b/drivers/misc/Kconfig
@@ -612,6 +612,11 @@ config SIERRA_KS_IF
 	  keys to userland to applications with proper permissions.
 #SWISTOP
 
+config PERSONAL_PM
+        tristate "personal power mangment driver"
+        help
+          driver handling named GPIO and initial status settings.
+
 source "drivers/misc/c2port/Kconfig"
 source "drivers/misc/eeprom/Kconfig"
 source "drivers/misc/cb710/Kconfig"
diff --git a/drivers/misc/Makefile b/drivers/misc/Makefile
index 09fb92c69f0f..3da17627fd2e 100755
--- a/drivers/misc/Makefile
+++ b/drivers/misc/Makefile
@@ -74,3 +74,4 @@ obj-$(CONFIG_MEMORY_STATE_TIME) += memory_state_time.o
 obj-$(CONFIG_SIERRA_TZDEV) 		+= sierra_tzdev.o
 obj-$(CONFIG_SIERRA)			+= sierra_tcxo_clk.o sierra_safe_pwr_remove.o
 obj-$(CONFIG_SIERRA_KS_IF)	+= sierra_ks_if.o
+obj-$(CONFIG_PERSONAL_PM)      += personal_pm.o
diff --git a/drivers/misc/personal_pm.c b/drivers/misc/personal_pm.c
new file mode 100644
index 000000000000..f66d49030031
--- /dev/null
+++ b/drivers/misc/personal_pm.c
@@ -0,0 +1,131 @@
+/*
+ * Copyright (C) 2010 Amarula Solutions.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/kallsyms.h>
+#include <linux/delay.h>
+#include <linux/err.h>
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/of_gpio.h>
+#include <linux/platform_device.h>
+#include <linux/pm.h>
+#include <linux/regulator/consumer.h>
+
+struct personal_station {
+	int	n0_general_som_to_pos_61;
+};
+
+
+struct regulator * v3v3_supply;
+
+
+static int personal_station_request_export(struct device *dev, int flags)
+{
+	struct device_node *np = dev->of_node;
+	int ret;
+	u32 tmp;
+	u8 num_relays, i;
+	u32 pin_num, pin_init_val, pin_stat;
+	const char *oh_name;
+
+	if (!of_get_property(np, "pin_numbers", &tmp))
+		goto error_parse;
+	if (!of_get_property(np, "pin_names", &tmp))
+		goto error_parse;
+	if (!of_get_property(np, "pin_states", &tmp))
+		goto error_parse;
+	if (!of_get_property(np, "pin_init_val", &tmp))
+		goto error_parse;
+	num_relays = tmp / (sizeof(u32));
+	dev_info(dev, "num_relays %d\n", num_relays);
+	for (i = 0; i < num_relays; i++) {
+		if (of_property_read_u32_index(np, "pin_numbers", i, &pin_num))
+			goto error_parse;
+		if (of_property_read_u32_index(np, "pin_init_val", i, &pin_init_val))
+			goto error_parse;
+		if (of_property_read_u32_index(np, "pin_states", i, &pin_stat))
+			goto error_parse;
+		if (of_property_read_string_index(np, "pin_names", i, &oh_name))
+			goto error_parse;
+		ret = devm_gpio_request_one(dev, pin_num, pin_stat, oh_name);
+		if (ret) {
+			dev_err(dev, "Failed to request GPIO %d, error %d\n",
+				pin_num, ret);
+			return ret;
+		}
+		gpio_export(pin_num, 1);
+		gpio_export_link(dev, oh_name, pin_num);
+	}
+	return 0;
+
+error_parse: 
+	dev_err(dev, "Failed to parse DT\n");
+	return -EINVAL;
+}
+
+static int personal_station_probe(struct platform_device *pdev)
+{
+	struct personal_station *priv;
+	int ret;
+
+	if (!pdev->dev.of_node) {
+		dev_err(&pdev->dev, "This driver support only DT init\n");
+		return -EINVAL;
+	}
+	priv = devm_kzalloc(&pdev->dev,
+			sizeof(struct personal_station), GFP_KERNEL);
+	if (!priv) {
+		dev_err(&pdev->dev, "Failed to allocate memory\n");
+		return -ENOMEM;
+	}
+
+	platform_set_drvdata(pdev, priv);
+	ret = personal_station_request_export(&pdev->dev, GPIOF_OUT_INIT_LOW);
+	dev_info(&pdev->dev, "Probed\n");
+
+	return 0;
+}
+
+static int personal_station_remove(struct platform_device *pdev)
+{
+	platform_set_drvdata(pdev, NULL);
+
+	return 0;
+}
+
+static const struct of_device_id personal_station_match[] = {
+	{ .compatible = "personal,personal_station-pm", },
+	{ },
+};
+
+static struct platform_driver personal_station_driver = {
+	.probe		= personal_station_probe,
+	.remove		= personal_station_remove,
+	.driver		= {
+		.name	= "personal_station-pm",
+		.of_match_table = of_match_ptr(personal_station_match),
+	},
+};
+
+static int __init personal_station_init(void)
+{
+	return platform_driver_register(&personal_station_driver);
+}
+
+static void __exit personal_station_exit(void)
+{
+	platform_driver_unregister(&personal_station_driver);
+}
+
+module_init(personal_station_init);
+module_exit(personal_station_exit);
+
+MODULE_ALIAS("platform:personal_station-pm");
+MODULE_DESCRIPTION("Personal Station Board Driver");
+MODULE_LICENSE("GPL");
diff --git a/include/dt-bindings/gpio/gpio.h b/include/dt-bindings/gpio/gpio.h
index e6b1e0a808ae..0394800f4106 100644
--- a/include/dt-bindings/gpio/gpio.h
+++ b/include/dt-bindings/gpio/gpio.h
@@ -11,5 +11,7 @@
 
 #define GPIO_ACTIVE_HIGH 0
 #define GPIO_ACTIVE_LOW 1
-
+#define GPIOF_IN 1
+#define GPIOF_OUT_INIT_LOW 0
+#define GPIOF_OUT_INIT_HIGH 2
 #endif
-- 
2.17.1

